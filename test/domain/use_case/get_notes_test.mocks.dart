// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_note_app/test/domain/use_case/get_notes_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_note_app/data/repository/note_repository_impl.dart'
    as _i3;
import 'package:flutter_note_app/data/source/note_db_helper.dart' as _i2;
import 'package:flutter_note_app/domain/model/note.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoteDbHelper_0 extends _i1.SmartFake implements _i2.NoteDbHelper {
  _FakeNoteDbHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteRepositoryImple].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepositoryImple extends _i1.Mock
    implements _i3.NoteRepositoryImple {
  MockNoteRepositoryImple() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteDbHelper get noteDbHelper => (super.noSuchMethod(
        Invocation.getter(#noteDbHelper),
        returnValue: _FakeNoteDbHelper_0(
          this,
          Invocation.getter(#noteDbHelper),
        ),
      ) as _i2.NoteDbHelper);
  @override
  _i4.Future<void> deleteNote(_i5.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [note],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i5.Note?> getNoteById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [id],
        ),
        returnValue: _i4.Future<_i5.Note?>.value(),
      ) as _i4.Future<_i5.Note?>);
  @override
  _i4.Future<List<_i5.Note>> getNotes() => (super.noSuchMethod(
        Invocation.method(
          #getNotes,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Note>>.value(<_i5.Note>[]),
      ) as _i4.Future<List<_i5.Note>>);
  @override
  _i4.Future<void> insertNote(_i5.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #insertNote,
          [note],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> updateNote(_i5.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [note],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
